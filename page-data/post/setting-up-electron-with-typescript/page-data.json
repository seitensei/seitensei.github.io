{"componentChunkName":"component---src-templates-post-tsx","path":"/post/setting-up-electron-with-typescript/","result":{"data":{"post":{"id":"cG9zdDo0OQ==","excerpt":"<p>I don&#8217;t typically explore native desktop or mobile development, since I can just host a web app on a Raspberry Pi or VPS and access the app anywhere on anything, sometimes I just need a tool that I will only be using on one computer and need to store data on the filesystem. For that&hellip; <a class=\"more-link\" href=\"/2021/04/28/setting-up-electron-with-typescript/\">Continue reading <span class=\"screen-reader-text\">Setting up Electron with TypeScript</span></a></p>\n","content":"<p>I don&#8217;t typically explore native desktop or mobile development, since I can just host a web app on a Raspberry Pi or VPS and access the app anywhere on anything, sometimes I just need a tool that I will only be using on one computer and need to store data on the filesystem. For that purpose, I&#8217;m going to be exploring <a href=\"https://www.electronjs.org/\" rel=\"nofollow\">Electron</a>.</p>\n<h2>Setup</h2>\n<p>I&#8217;m going to be using <a href=\"https://yarnpkg.com/\" rel=\"nofollow\">Yarn</a> 1.x as a package manager, and since the 1.x branch is mostly a drop-in replacement for npm, it should be easy to adapt any commands to npm if that&#8217;s a preferred package manager.</p>\n<p>I&#8217;m going to be using these core dependencies to set up the project:</p>\n<ul>\n<li><a href=\"https://www.electronjs.org/\" rel=\"nofollow\">Electron</a> (11+, since it needs to run on Apple Silicon)</li>\n<li><a href=\"https://www.typescriptlang.org/\" rel=\"nofollow\">TypeScript</a> &#8211; Primarily for typechecking, Babel will actually be used to transform TypeScript</li>\n<li><a href=\"https://babeljs.io/\" rel=\"nofollow\">Babel</a> &#8211; This will handle the transformation of TypeScript</li>\n<li><a href=\"https://webpack.js.org/\" rel=\"nofollow\">Webpack</a> &#8211; I&#8217;ll be relying on webpack along with a few plugins to build the bundle for Electron.</li>\n</ul>\n<p>In order to maintain code quality, I&#8217;ll be using some linting and formatting tools.</p>\n<ul>\n<li><a href=\"https://prettier.io/\" rel=\"nofollow\">Prettier</a></li>\n<li><a href=\"https://eslint.org/\" rel=\"nofollow\">ESLint</a></li>\n</ul>\n<p>All of these are dev dependencies, so we can get away with a single command.</p>\n<pre><code class=\"language-bash\">yarn add --dev electron typescript @types/node @babel/core \\\nbabel-loader @babel/plugin-proposal-class-properties \\\n@babel/plugin-proposal-object-rest-spread @babel/preset-env \\\n@babel/preset-typescript webpack webpack-cli style-loader \\\ncss-loader sass sass-loader html-webpack-plugin prettier \\\neslint @typescript-eslint/eslint-plugin \\\n@typescript-eslint/parser eslint-config-prettier \\\neslint-plugin-prettier cross-env</code></pre>\n<p>After that, all the base configuration can be initialized.</p>\n<p>Manually create a <code>prettier.config.js</code> file, and configure as needed. I will typically use something like this:</p>\n<pre><code class=\"language-javascript\">module.exports = {\n    trailingComma: &#039;all&#039;,\n    tabWidth: 4,\n    semi: true,\n    singleQuote: true,\n    bracketSpacing: true,\n}</code></pre>\n<p>Follow this up by adding the script to run prettier to <code>package.json</code>: <code>&quot;format&quot;: &quot;prettier --write src/&quot;</code></p>\n<p>Do the same with <code>eslint</code>. It&#8217;s also possible to use the <code>eslint --init</code> command to generate a base configuration to work with. My <code>.eslintrc.js</code> typically is similar to the following at this stage:</p>\n<pre><code class=\"language-javascript\">module.exports = {\n    extends: [\n        &#039;eslint:recommended&#039;,\n        &#039;plugin:@typescript-eslint/recommended&#039;,\n        &#039;prettier&#039;,\n        &#039;prettier/@typescript-eslint&#039;\n    ],\n    parser: &#039;@typescript-eslint/parser&#039;,\n    plugins: [\n        &#039;@typescript-eslint&#039;,\n        &#039;prettier&#039;\n    ],\n    rules: {\n        &#039;@typescript-eslint/explicit-module-boundary-types&#039;: &#039;off&#039;,\n        &#039;prettier/prettier&#039;: &#039;error&#039;,\n        &#039;prefer-const&#039;: &#039;error&#039;,\n        &#039;no-debugger&#039;: &#039;error&#039;\n    },\n};\n\n</code></pre>\n<p>Finally, initialize TypeScript&#8217;s configuration.</p>\n<p><code>yarn tsc --init</code></p>\n<p>Just update <code>target</code> to <code>&quot;es6&quot;</code>.</p>\n<p>For babel, create the <code>babel.config.json</code> and populate it to handle <code>preset-env</code> and TypeScript.</p>\n<div class=\"highlight highlight-source-json position-relative\">\n<pre><code class=\"language-json\">{\n    &quot;presets&quot;: [\n        &quot;@babel/preset-env&quot;,\n        &quot;@babel/preset-typescript&quot;\n    ],\n    &quot;plugins&quot;: [\n        &quot;@babel/proposal-class-properties&quot;,\n        &quot;@babel/proposal-object-rest-spread&quot;\n    ]\n}</code></pre>\n</div>\n<p>On to Webpack!</p>\n<p>The following <code>webpack.config.json</code> will set webpack up to handle <code>.ts</code> files through Babel and will allow the use of <code>sass</code>.</p>\n<pre><code class=\"language-javascript\">const path = require(&#039;path&#039;);\nconst HtmlWebpackPlugin = require(&#039;html-webpack-plugin&#039;);\n\nmodule.exports = (env) =&gt; {\n    const isDevelopment = env.development;\n\n    return {\n        entry: path.resolve(__dirname, &#039;./src/main.ts&#039;),\n        target: &#039;electron-main&#039;,\n        resolve: {\n            extensions: [&#039;*&#039;, &#039;.ts&#039;, &#039;.js&#039;],\n        },\n        module: {\n            rules: [\n                {\n                    test: /\\.(tsx|ts|jsx|js)$/,\n                    exclude: /node_modules/,\n                    use: [&#039;babel-loader&#039;],\n                },\n                {\n                    test: /\\.(scss|sass|css)$/,\n                    use: [\n                        &#039;style-loader&#039;,\n                        {\n                            loader: &#039;css-loader&#039;,\n                            options: {\n                                sourceMap: isDevelopment,\n                                importLoaders: 1,\n                                modules: true,\n                            },\n                        },\n                        {\n                            loader: &#039;sass-loader&#039;,\n                            options: {\n                                // use dart-sass\n                                implementation: require(&#039;sass&#039;),\n                                sourceMap: isDevelopment,\n                            },\n                        },\n                    ]\n                },\n            ],\n        },\n        devtool: isDevelopment ? &#039;eval-source-map&#039; : false,\n        optimization: {\n            minimize: !isDevelopment\n        },\n        output: {\n            path: path.resolve(__dirname, &#039;./dist&#039;),\n            filename: &#039;[name].bundle.js&#039;,\n            publicPath: &#039;/&#039;,\n        },\n        plugins: [\n            new HtmlWebpackPlugin({\n                template: path.resolve(__dirname + &#039;/src/index.html&#039;),\n                filename: &#039;index.html&#039;,\n            }),\n        ],\n    };\n};\n</code> Add the build script to <code>package.json</code>:</pre>\n<p><code>&quot;build&quot;: &quot;cross-env NODE_ENV=development webpack --env development&quot;</code></p>\n<p>Make sure to add the appropriate <code>index.html</code> and <code>main.ts</code>.</p>\n<pre><code class=\"language-typescript\">\n// src/main.ts\nimport { app, BrowserWindow } from &#039;electron&#039;;\n\nconst createWindow = () =&gt; {\n    let mainWindow = new BrowserWindow({\n        width: 640,\n        height: 480,\n        resizable: true,\n        webPreferences: {\n            nodeIntegration: true,\n        },\n    });\n\n    mainWindow.loadFile(&#039;index.html&#039;);\n};\n\napp.whenReady().then(() =&gt; {\n    createWindow();\n\n    app.on(&#039;activate&#039;, () =&gt; {\n        if (BrowserWindow.getAllWindows().length === 0) createWindow();\n    });\n});\n\napp.on(&#039;window-all-closed&#039;, () =&gt; {\n    if (process.platform !== &#039;darwin&#039;) app.quit();\n});\n</code></pre>\n<pre><code class=\"language-markup\">&lt;!-- index.html --&gt;\n&lt;html&gt;\n    &lt;head&gt; &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Hello, Electron&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>Add the following script to run electron, <code>&quot;start&quot;: &quot;electron ./dist/main.bundle.js&quot;</code>.</p>\n<pre><code class=\"language-bash\">yarn build\nyarn start</code></pre>\n<p><img src=\"https://github.com/tnsicdr/tnsicdr.github.io/blob/216db49cb03212d40a038698ae31bb344e60cb33/content/posts/setting-up-electron-with-typescript/typescript-electron.png?raw=true\" alt=\"typescript-electron.png\" /></p>\n","title":"Setting up Electron with TypeScript","date":"2021-04-28T18:41:55","featuredImage":null},"previous":{"slug":"salespad-a-retrospective","title":"SalesPad, A retrospective"},"next":null},"pageContext":{"id":"cG9zdDo0OQ==","previousPostId":"cG9zdDoxNA==","nextPostId":null}},"staticQueryHashes":["2251470642"]}