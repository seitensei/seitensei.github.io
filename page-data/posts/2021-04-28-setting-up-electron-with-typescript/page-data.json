{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/2021-04-28-setting-up-electron-with-typescript/","result":{"data":{"markdownRemark":{"html":"<p>I don't typically explore native desktop or mobile development, since I can just host a web app on a Raspberry Pi or VPS and access the app anywhere on anything, sometimes I just need a tool that I will only be using on one computer and need to store data on the filesystem. For that purpose, I'm going to be exploring <a href=\"https://www.electronjs.org/\">Electon</a>.</p>\n<h2>Setup</h2>\n<p>I'm going to be using <a href=\"https://yarnpkg.com/\">Yarn</a> 1.x as a package manager, and since the 1.x branch is mostly a drop-in replacement for npm, it should be easy to adapt any commands to npm if that's a preferred package manager.</p>\n<p>I'm going to be using these core dependencies to set up the project:</p>\n<ul>\n<li><a href=\"https://www.electronjs.org/\">Electon</a> (11+, since it needs to run on Apple Silicon)</li>\n<li><a href=\"https://www.typescriptlang.org/\">TypeScript</a> - Primarily for typechecking, Babel will actually be used to transform TypeScript</li>\n<li><a href=\"https://babeljs.io/\">Babel</a> - This will handle the transformation of TypeScript</li>\n<li><a href=\"https://webpack.js.org/\">Webpack</a> - I'll be relying on webpack along with a few plugins to build the bundle for Electron.</li>\n</ul>\n<p>In order to maintain code quality, I'll be using some linting and formatting tools.</p>\n<ul>\n<li><a href=\"https://prettier.io/\">Prettier</a></li>\n<li><a href=\"https://eslint.org/\">ESLint</a></li>\n</ul>\n<p>All of these are dev dependencies, so we can get away with a single command.</p>\n<pre><code>yarn add --dev electron typescript @types/node @babel/core \\\nbabel-loader @babel/plugin-proposal-class-properties \\\n@babel/plugin-proposal-object-rest-spread @babel/preset-env \\\n@babel/preset-typescript webpack webpack-cli style-loader \\\ncss-loader sass sass-loader html-webpack-plugin prettier \\\neslint @typescript-eslint/eslint-plugin \\\n@typescript-eslint/parser eslint-config-prettier \\\neslint-plugin-prettier cross-env\n</code></pre>\n<p>After that, all the base configuration can be initialized.</p>\n<p>Manually create a <code>prettier.config.js</code> file, and configure as needed. I will typically use something like this:</p>\n<pre><code class=\"language-js\">module.exports = {\n    trailingComma: 'all',\n    tabWidth: 4,\n    semi: true,\n    singleQuote: true,\n    bracketSpacing: true,\n}\n</code></pre>\n<p>Follow this up by adding the script to run prettier to <code>package.json</code>: <code>\"format\": \"prettier --write src/\"</code></p>\n<p>Do the same with <code>eslint</code>. It's also possible to use the <code>eslint --init</code> command to generate a base configuration to work with. My <code>.eslintrc.js</code> typically is similar to the following at this stage:</p>\n<pre><code class=\"language-js\">module.exports = {\n    extends: [\n        'eslint:recommended',\n        'plugin:@typescript-eslint/recommended',\n        'prettier',\n        'prettier/@typescript-eslint'\n    ],\n    parser: '@typescript-eslint/parser',\n    plugins: [\n        '@typescript-eslint',\n        'prettier'\n    ],\n    rules: {\n        '@typescript-eslint/explicit-module-boundary-types': 'off',\n        'prettier/prettier': 'error',\n        'prefer-const': 'error',\n        'no-debugger': 'error'\n    },\n};\n\n</code></pre>\n<p>Finally, initialize TypeScript's configuration.</p>\n<p><code>yarn tsc --init</code></p>\n<p>Just update <code>target</code> to <code>\"es6\"</code>.</p>\n<p>For babel, create the <code>babel.config.json</code> and populate it to handle <code>preset-env</code> and TypeScript.</p>\n<pre><code class=\"language-json\">{\n    \"presets\": [\n        \"@babel/preset-env\",\n        \"@babel/preset-typescript\"\n    ],\n    \"plugins\": [\n        \"@babel/proposal-class-properties\",\n        \"@babel/proposal-object-rest-spread\"\n    ]\n}\n</code></pre>\n<p>On to Webpack!</p>\n<p>The following <code>webpack.config.json</code> will set webpack up to handle <code>.ts</code> files through Babel and will allow the use of <code>sass</code>.</p>\n<pre><code class=\"language-js\">const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = (env) => {\n    const isDevelopment = env.development;\n\n    return {\n        entry: path.resolve(__dirname, './src/main.ts'),\n        target: 'electron-main',\n        resolve: {\n            extensions: ['*', '.ts', '.js'],\n        },\n        module: {\n            rules: [\n                {\n                    test: /\\.(tsx|ts|jsx|js)$/,\n                    exclude: /node_modules/,\n                    use: ['babel-loader'],\n                },\n                {\n                    test: /\\.(scss|sass|css)$/,\n                    use: [\n                        'style-loader',\n                        {\n                            loader: 'css-loader',\n                            options: {\n                                sourceMap: isDevelopment,\n                                importLoaders: 1,\n                                modules: true,\n                            },\n                        },\n                        {\n                            loader: 'sass-loader',\n                            options: {\n                                // use dart-sass\n                                implementation: require('sass'),\n                                sourceMap: isDevelopment,\n                            },\n                        },\n                    ]\n                },\n            ],\n        },\n        devtool: isDevelopment ? 'eval-source-map' : false,\n        optimization: {\n            minimize: !isDevelopment\n        },\n        output: {\n            path: path.resolve(__dirname, './dist'),\n            filename: '[name].bundle.js',\n            publicPath: '/',\n        },\n        plugins: [\n            new HtmlWebpackPlugin({\n                template: path.resolve(__dirname + '/src/index.html'),\n                filename: 'index.html',\n            }),\n        ],\n    };\n};\n\n</code></pre>\n<p>Add the build script to <code>package.json</code>:</p>\n<p><code>\"build\": \"cross-env NODE_ENV=development webpack --env development\"</code></p>\n<p>Make sure to add the appropriate <code>index.html</code> and <code>main.ts</code>.</p>\n<pre><code class=\"language-typescript\">// src/main.ts\nimport { app, BrowserWindow } from 'electron';\n\nconst createWindow = () => {\n    let mainWindow = new BrowserWindow({\n        width: 640,\n        height: 480,\n        resizable: true,\n        webPreferences: {\n            nodeIntegration: true,\n        },\n    });\n\n    mainWindow.loadFile('index.html');\n};\n\napp.whenReady().then(() => {\n    createWindow();\n\n    app.on('activate', () => {\n        if (BrowserWindow.getAllWindows().length === 0) createWindow();\n    });\n});\n\napp.on('window-all-closed', () => {\n    if (process.platform !== 'darwin') app.quit();\n});\n\n</code></pre>\n<pre><code class=\"language-html\">&#x3C;!-- index.html -->\n&#x3C;html>\n    &#x3C;head> &#x3C;/head>\n    &#x3C;body>\n        &#x3C;h1>Hello, Electron&#x3C;/h1>\n    &#x3C;/body>\n&#x3C;/html>\n\n</code></pre>\n<p>Add the following script to run electron, <code>\"start\": \"electron ./dist/main.bundle.js\"</code>.</p>\n<pre><code>yarn build\nyarn start\n</code></pre>\n<p>In the follow up to this post, I'll integrate <a href=\"https://reactjs.org/\">React</a> and testing.</p>","frontmatter":{"date":"2021-04-28","title":"Setting up Electron with TypeScript"}}},"pageContext":{"slug":"/posts/2021-04-28-setting-up-electron-with-typescript/"}},"staticQueryHashes":["2326376460"]}